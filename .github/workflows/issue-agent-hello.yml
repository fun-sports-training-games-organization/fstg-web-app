name: Issue Agent PR

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write

env:
  OPENAI_MODEL: gpt-5-nano
  PROMPT_TEMPLATE: |
    You are an AI coding assistant. You will be given:
    1. A GitHub issue describing a requested change.
    2. Context about the current repository (file tree, key files).

    Your task:
    - Generate a valid unified diff (patch) that implements the change.
    - Suggest a concise PR title.
    - Suggest a short PR body summarizing the changes.

    Output ONLY valid JSON in the following format:
    {
      "pr_title": "...",
      "pr_body": "...",
      "patch": "..."
    }

jobs:
  create-branch-and-pr:
    if: github.event.label.name == 'agent-task'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set up branch name
        id: vars
        run: |
          MAXLEN="${BRANCH_NAME_MAXLEN:-60}"
          SAFE_TITLE=$(echo "${{ github.event.issue.title }}" \
            | tr '[:upper:]' '[:lower:]' \
            | tr ' ' '-' \
            | tr -cd '[:alnum:]-' \
            | cut -c1-"$MAXLEN" \
            | sed 's/-*$//')

          if [ -z "$SAFE_TITLE" ]; then
            echo "Error: Issue title produced an empty branch name after sanitization."
            exit 1
          fi

          echo "BRANCH_NAME=agent/${{ github.event.issue.number }}-${SAFE_TITLE}" >> $GITHUB_ENV

      - name: Gather repository context
        run: |
          echo "## Repository File Tree" > repo_context.txt
          tree -I '.git' -L 2 >> repo_context.txt || true
          echo -e "\n## README.md" >> repo_context.txt
          [ -f README.md ] && cat README.md >> repo_context.txt || echo "No README.md" >> repo_context.txt

      - name: AI generate patch and PR metadata
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          PROMPT_JSON=$(printf "%s\n\nGitHub Issue:\nTitle: %s\nBody: %s\n\nRepository Context:\n%s" \
            "${PROMPT_TEMPLATE}" \
            "${{ github.event.issue.title }}" \
            "${{ github.event.issue.body }}" \
            "$(cat repo_context.txt)" | jq -Rs .)

          RAW=$(curl https://api.openai.com/v1/chat/completions \
            -s \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"${OPENAI_MODEL}\",
              \"messages\": [{\"role\": \"user\", \"content\": ${PROMPT_JSON}}]
            }")

          echo "----- RAW API RESPONSE START -----"
          echo "$RAW"
          echo "----- RAW API RESPONSE END -----"

          ERROR_MSG=$(echo "$RAW" | jq -r '.error.message // empty')
          if [ -n "$ERROR_MSG" ]; then
            echo "OpenAI API Error: $ERROR_MSG"
            exit 1
          fi

          PR_TITLE=$(echo "$RAW" | jq -r '.choices[0].message.content' | jq -r '.pr_title')
          PR_BODY=$(echo "$RAW" | jq -r '.choices[0].message.content' | jq -r '.pr_body')
          PATCH=$(echo "$RAW" | jq -r '.choices[0].message.content' | jq -r '.patch')

          if [ -z "$PATCH" ] || [ "$PATCH" = "null" ]; then
            echo "Error: No patch returned from AI."
            exit 1
          fi

          echo "$PATCH" > patch.diff
          echo "$PR_TITLE" > pr_title.txt
          echo "$PR_BODY" > pr_body.txt

      - name: Apply AI-generated patch
        run: |
          git apply patch.diff || { echo "Patch failed to apply"; exit 1; }
          git add .
          git commit -m "$(cat pr_title.txt)"

      - name: Push branch
        run: |
          git push origin "$BRANCH_NAME"

      - name: Open Pull Request
        run: |
          gh pr create \
            --title "$(cat pr_title.txt)" \
            --body "$(cat pr_body.txt)" \
            --base main \
            --head "$BRANCH_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
